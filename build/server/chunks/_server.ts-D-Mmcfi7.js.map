{"version":3,"file":"_server.ts-D-Mmcfi7.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/database/_server.ts.js"],"sourcesContent":["import { j as json } from \"../../../chunks/index.js\";\nimport pg from \"pg\";\nimport * as dotenv from \"dotenv\";\nconst { Pool } = pg;\ndotenv.config();\nconst pool = new Pool({\n  host: process.env.DB_HOST,\n  port: Number(process.env.DB_PORT),\n  database: process.env.DB_NAME,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD\n});\nasync function getAllNeighbours(csrid, depth) {\n  const neighbours = /* @__PURE__ */ new Set();\n  const queue = [{ id: csrid, currentDepth: 0 }];\n  const visited = /* @__PURE__ */ new Set([csrid]);\n  while (queue.length > 0) {\n    const { id, currentDepth } = queue.shift();\n    if (currentDepth >= depth) continue;\n    const { rows } = await pool.query(\"SELECT neighbour FROM edges WHERE csrid = $1\", [id]);\n    for (const row of rows) {\n      if (!visited.has(row.neighbour)) {\n        visited.add(row.neighbour);\n        neighbours.add(row.neighbour);\n        queue.push({ id: row.neighbour, currentDepth: currentDepth + 1 });\n      }\n    }\n  }\n  return neighbours;\n}\nconst GET = async ({ url }) => {\n  try {\n    const depth = parseInt(url.searchParams.get(\"depth\") || \"1\", 10);\n    const csrid = url.searchParams.get(\"csrid\");\n    if (!csrid) {\n      return json({ error: \"Missing csrid parameter\" }, { status: 400 });\n    }\n    const neighbours = await getAllNeighbours(csrid, depth);\n    return json(Array.from(neighbours));\n  } catch (error) {\n    console.error(\"Database query error:\", error);\n    return json({ error: \"Failed to fetch data\" }, { status: 500 });\n  }\n};\nexport {\n  GET\n};\n"],"names":[],"mappings":";;;;AAGA,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AACpB,MAAM,CAAC,MAAM,EAAE,CAAC;AAChB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC;AACtB,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;AAC3B,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;AACnC,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;AAC/B,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;AAC3B,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW;AACnC,CAAC,CAAC,CAAC;AACH,eAAe,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE;AAC9C,EAAE,MAAM,UAAU,mBAAmB,IAAI,GAAG,EAAE,CAAC;AAC/C,EAAE,MAAM,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;AACjD,EAAE,MAAM,OAAO,mBAAmB,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACnD,EAAE,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B,IAAI,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;AAC/C,IAAI,IAAI,YAAY,IAAI,KAAK,EAAE,SAAS;AACxC,IAAI,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,8CAA8C,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5F,IAAI,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;AAC5B,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;AACvC,QAAQ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACnC,QAAQ,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACtC,QAAQ,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,SAAS,EAAE,YAAY,EAAE,YAAY,GAAG,CAAC,EAAE,CAAC,CAAC;AAC1E,OAAO;AACP,KAAK;AACL,GAAG;AACH,EAAE,OAAO,UAAU,CAAC;AACpB,CAAC;AACI,MAAC,GAAG,GAAG,OAAO,EAAE,GAAG,EAAE,KAAK;AAC/B,EAAE,IAAI;AACN,IAAI,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;AACrE,IAAI,MAAM,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAChD,IAAI,IAAI,CAAC,KAAK,EAAE;AAChB,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,yBAAyB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AACzE,KAAK;AACL,IAAI,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAC5D,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;AACxC,GAAG,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;AAClD,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AACpE,GAAG;AACH;;;;"}